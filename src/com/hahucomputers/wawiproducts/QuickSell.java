/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.hahucomputers.wawiproducts;



import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfWriter;
import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Connection;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DecimalFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author tom
 */
public class QuickSell extends javax.swing.JFrame {

    /**
     * Creates new form readerMain
     */
    

    public QuickSell() {
        initComponents();
        
                  java.net.URL imageURL = LogIn.class.getResource("/com/hahu/imgs/index.png");
                  ImageIcon img = new ImageIcon(imageURL);
                  this.setIconImage(img.getImage());
      
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        barcode = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        qty = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        totPrice = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        discount = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        invoice = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        customer = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        soldDate = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(900, 700));
        setPreferredSize(new java.awt.Dimension(900, 700));
        setSize(new java.awt.Dimension(900, 700));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jButton1.setBackground(new java.awt.Color(204, 255, 204));
        jButton1.setText("Done");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 204));
        jButton4.setText("Cancel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Quick Sell");

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel4.setText("Scan Code:");

        barcode.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        barcode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        barcode.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                barcodeKeyTyped(evt);
            }
        });

        jLabel15.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel15.setText("Quantity: ");

        qty.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        qty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        qty.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                qtyKeyPressed(evt);
            }
        });

        jLabel16.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel16.setText("Price: ");
        jLabel16.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        price.setEditable(false);
        price.setBackground(new java.awt.Color(240, 255, 186));
        price.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        price.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        price.setText("0");
        price.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel3.setBackground(new java.awt.Color(0, 153, 255));

        jLabel11.setFont(new java.awt.Font("Monotype Corsiva", 0, 24)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(255, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("**Limited**");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(17, 17, 17))
        );

        jLabel17.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel17.setText("Total: ");
        jLabel17.setVerticalAlignment(javax.swing.SwingConstants.TOP);

        totPrice.setEditable(false);
        totPrice.setBackground(new java.awt.Color(204, 255, 204));
        totPrice.setFont(new java.awt.Font("Times New Roman", 0, 30)); // NOI18N
        totPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        totPrice.setText("0");
        totPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel18.setText("Discount: ");

        discount.setEditable(false);
        discount.setBackground(new java.awt.Color(102, 102, 102));
        discount.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        discount.setForeground(new java.awt.Color(255, 255, 255));
        discount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        discount.setDisabledTextColor(new java.awt.Color(51, 51, 51));

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel5.setText("Invoice No:");

        invoice.setEditable(false);
        invoice.setBackground(new java.awt.Color(102, 102, 102));
        invoice.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        invoice.setForeground(new java.awt.Color(255, 255, 255));
        invoice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        invoice.setDisabledTextColor(new java.awt.Color(51, 51, 51));

        jLabel22.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel22.setText("Buyer Name: ");

        customer.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        customer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        customer.setMargin(new java.awt.Insets(20, 20, 20, 20));
        customer.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerFocusLost(evt);
            }
        });
        customer.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                customerKeyPressed(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jLabel19.setText("Date:");

        soldDate.setEditable(false);
        soldDate.setBackground(new java.awt.Color(102, 102, 102));
        soldDate.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        soldDate.setForeground(new java.awt.Color(255, 255, 255));
        soldDate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        soldDate.setDisabledTextColor(new java.awt.Color(51, 51, 51));

        jTable1.setBackground(new java.awt.Color(153, 153, 255));
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTable1.setForeground(new java.awt.Color(255, 255, 255));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "PRODUCT NAME ", "AMOUNT", "UNIT PRICE ", "QUANTITY"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setRowHeight(30);
        jScrollPane2.setViewportView(jTable1);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/hahu/imgs/logo.png"))); // NOI18N

        jButton5.setBackground(new java.awt.Color(153, 255, 204));
        jButton5.setText("Get Invoice");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 880, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(10, 10, 10)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(barcode, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(invoice))
                                .addGap(75, 75, 75)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(qty, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(soldDate))
                                .addGap(67, 67, 67)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(customer, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(discount)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(price, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE)
                                .addGap(256, 256, 256)
                                .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, 84, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(totPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 224, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(59, 59, 59)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(46, 46, 46)
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(292, 292, 292)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                .addGap(10, 10, 10)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 43, Short.MAX_VALUE)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addComponent(barcode)
                                .addGap(10, 10, 10)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(invoice, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(3, 3, 3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel22, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(customer))
                                .addGap(0, 0, 0)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(discount, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(6, 6, 6))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                                .addGap(3, 3, 3))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(qty))
                                .addGap(10, 10, 10)
                                .addComponent(soldDate, javax.swing.GroupLayout.DEFAULT_SIZE, 39, Short.MAX_VALUE)))))
                .addGap(23, 23, 23)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(totPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)
                                .addGap(33, 33, 33))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(price)
                            .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(22, 22, 22)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 77, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
 
    private static final String USER_NAME = "root";
    private static final String USER_PASS =  "hahucomputers123";
    
   // create a method to be able to display suggesion 
   
   HandleDB hdb = new HandleDB();

  // method to create connection and queries 
    public ResultSet connect(String query) throws SQLException {
    hdb.setHostURL("jdbc:mysql://localhost:3306/wawiproducts?allowMultiQueries=true&autoReconnect=true&useSSL=false&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC", USER_NAME, USER_PASS); 
    ResultSet rs = hdb.SetQuery (query);
    return rs;
   }
  
  // List Model 
    
  DefaultListModel dlm = new DefaultListModel();
  
    // unit_price general 

      int item_price;
      ArrayList<String> barcode_arr = new ArrayList<>();
      ArrayList<String> unit_price_arr = new ArrayList<>();
      int i;   
    
// 
    private BaseFont bfBold;
    private BaseFont bf;
    private int pageNumber;
    private int row_num;  
     
     
   // Import a class to add the daily sell item to database
    
     static InsertProducts new_sell = new InsertProducts();
     static GetStockProducts update_stock = new GetStockProducts();
     static UpdateProduct update = new UpdateProduct();
     ErrorLogger err = new ErrorLogger();
   // Register product from table 
     
     public void insertFromTable(){

        try{

             int rows=jTable1.getRowCount();
                this.row_num= rows;
      
             JOptionPane.showMessageDialog(null, "successfully saved");
             
           }
           catch(HeadlessException e){
             JOptionPane.showMessageDialog(this,e.getMessage());
             ErrorLogger.writeFile("error happend at insert from table method in quick sell  "+e.toString());
           }

     }
    
   // Get details of the bar code
 
      public void getBarcodeDetail(String valueToFind) {

                 
        ResultSet res = null;
        try {
            String searchProd = "select distinct barcode_id, item_name, item_vol, unit_price from register_product where barcode_id = "+"'"+valueToFind+"'"+" ";
            res = connect(searchProd);
        } catch (SQLException ex) {
            Logger.getLogger(QuickSell.class.getName()).log(Level.SEVERE, null, ex);
            ErrorLogger.writeFile("error on get barcode detail throws: " + ex.toString());
            JOptionPane.showMessageDialog (this, "It seems the product has not been registered", "Error", JOptionPane.ERROR_MESSAGE);
            
            
        }

        try {
            
           DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
            while (res.next()){
             
            String valueGotten0 = res.getString("barcode_id");
            String valueGotten = res.getString("item_name");
            String valueGotten2 = res.getString("item_vol");
            String valueGotten3 = res.getString("unit_price");
            //soldDate.getText()

            model.addRow(new Object[] {valueGotten0, valueGotten, valueGotten2, valueGotten3});


            // set unit price to text field
            item_price = Integer.parseInt(valueGotten3);
            price.setText(valueGotten3);

       }
            
             this.i = model.getRowCount(); 
    
            } catch (SQLException ex) {
                Logger.getLogger(QuickSell.class.getName()).log(Level.SEVERE, null, ex);
                 ErrorLogger.writeFile("error on get barcode detail throws: " + ex.toString());
                JOptionPane.showMessageDialog (this, "could not find product, may be it was not registered", "Error", JOptionPane.WARNING_MESSAGE);

            }
        
   }
   
   
   // possible imnplmentation for the total price update 
   
   // up on read , we get a price then use that price and multiply it with the quantity 
   // set that value to the total price field and when  other price comes it should be added to the total 
   
        private int unit_qty (){
        int unit_qty = 0;
        
        if (!qty.getText().isEmpty()){
        int item_qty = Integer.parseInt(qty.getText());
        unit_qty = item_price * item_qty;
        } else {
            
            unit_qty = item_price * 1;
            
        }

        return unit_qty;

        }

        private int setTotal() {
        int final_tot = 0;
        int item_tot = Integer.parseInt(totPrice.getText());

        final_tot = this.unit_qty() + item_tot;

        return final_tot;
        }
       
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed

        this.dispose();
        new MenuPage().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

  private void updateFromTable(){
  
       int rows=jTable1.getRowCount();
         if (row_num >= 0){
         for(int row = 0; row<rows; row++)
         {   
    
    
           String barcode_id = (String)jTable1.getValueAt(row, 0);
           String item_name = (String) jTable1.getValueAt(row, 1);
           String unit_price = (String)jTable1.getValueAt(row, 3);
           int unit_price_int = Integer.parseInt(unit_price);
           String my_val = (String)jTable1.getValueAt(row, 4);
           int item_quan = Integer.parseInt(my_val);
           String _date = soldDate.getText();
           
           String cust_name = customer.getText().trim();
           if (cust_name.isEmpty()){
            cust_name = "none";
           }
      
         int cal_qty;
             try {
                 cal_qty = update_stock.itemsInStock(barcode_id, item_quan );
                 
                   // insert the actual sell to daily sell table 
               new_sell.insert(barcode_id, item_name, item_quan, cust_name, "Sold from quick sell", "", "", _date, unit_price_int, 0, "Sold from Quick sell", 0);
          
              // update stock base on the cal value gotten from this item_qty and retrived item from register_product
        
              update.updateItemQty(barcode_id, cal_qty, null);
           
             } catch (SQLException | IOException ex) {
                 Logger.getLogger(QuickSell.class.getName()).log(Level.SEVERE, null, ex);
                  ErrorLogger.writeFile("error on get barcode detail throws: " + ex.toString());
             }

        }
      }
  }
    
    
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

     
         if (row_num >= 0){
       
             JOptionPane.showMessageDialog (this, "Well done!", "success", JOptionPane.INFORMATION_MESSAGE);
         
        this.dispose();
        new MenuPage().setVisible(true);

     } else {
        
         JOptionPane.showMessageDialog (this, "Nothing to be done with empty table", "Error", JOptionPane.ERROR_MESSAGE);

     }
      
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void qtyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_qtyKeyPressed
  
      if (row_num >= 0){

          if(evt.getKeyCode() == KeyEvent.VK_ENTER){
          
            String getVal = qty.getText();  
            System.out.println("1st .... "+getVal);
            
           if (!getVal.isEmpty()){
         
               jTable1.setValueAt(getVal, i-1, 4);
                System.out.println("2nd .. "+getVal);
           }
           
           else {
                getVal = "1";
                jTable1.setValueAt(getVal, i-1, 4);
                 System.out.println("3rd .. "+getVal);
           
           }
  
           totPrice.setText(String.valueOf(setTotal()));
            qty.transferFocus();
        }
         // 
      } else {
      
      JOptionPane.showMessageDialog (this, "Nope!", "Error", JOptionPane.ERROR_MESSAGE);

      }
    }//GEN-LAST:event_qtyKeyPressed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        
         Random rand = new Random();
         invoice.setText(String.valueOf(rand.nextInt(9000000) + 1000000));
         Date today = Date.valueOf(LocalDate.now());
         soldDate.setText(today.toString());
         discount.setText("0%");
       
      
    }//GEN-LAST:event_formWindowOpened

    private void barcodeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_barcodeKeyTyped
       
        String find_value = barcode.getText().trim();
        getBarcodeDetail(find_value);
        barcode.transferFocus();
    }//GEN-LAST:event_barcodeKeyTyped

    // Get the dir to save the file
    
    
    public String getDir(){
     String dir = "";

     JFileChooser input = new JFileChooser();
      input.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
      // assign the new file chooser in to int 
      
         int result = input.showOpenDialog(this);
    
      if (result == JFileChooser.APPROVE_OPTION) {
         
      // if approve option was selected, replace the \ with / so that it can be used in java as a dir target 
       
          String inputLocation  = input.getSelectedFile().toString();
         
          dir = inputLocation.replace("\\", "\\\\");
         
         //the location will be returned from this method in a correct format so I can call it as a string parameter which points to a dir
         
        System.out.println("Approved to be " + dir);
         
       }    else if (result == JFileChooser.CANCEL_OPTION) {
    
            // give notification
}
    
    return dir;
    }
    
    
    
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

       
        if(row_num >= 0){
            
          String dir = getDir();
          createPDF(dir);
          
       JOptionPane.showMessageDialog (this, "file has been saved", "success", JOptionPane.INFORMATION_MESSAGE);
    
        } else {
        
         JOptionPane.showMessageDialog (this, "Nothing to print", "Error", JOptionPane.ERROR_MESSAGE);
    
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void customerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_customerKeyPressed

        if(evt.getKeyCode() == KeyEvent.VK_ENTER){
      
        // price.setText(price_unit); for KeyEvent.VK_BACKSPACE   
           barcode.setText("");
           barcode.setEnabled(true);
           barcode.setEditable(true);
           customer.transferFocusBackward();
           qty.transferFocusBackward();
           qty.setText("");
           updateFromTable();
        } else if (evt.getKeyCode() == KeyEvent.VK_TAB){
        
           barcode.setText("");
           barcode.setEnabled(true);
           barcode.setEditable(true);
           customer.transferFocusBackward();
           qty.transferFocusBackward();
           qty.setText("");
        }
    }//GEN-LAST:event_customerKeyPressed

    private void customerFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerFocusLost
     
        customer.setText("");
    }//GEN-LAST:event_customerFocusLost

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuickSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuickSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuickSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuickSell.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuickSell().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField barcode;
    private javax.swing.JTextField customer;
    private javax.swing.JTextField discount;
    private javax.swing.JTextField invoice;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField price;
    private javax.swing.JTextField qty;
    private javax.swing.JTextField soldDate;
    private javax.swing.JTextField totPrice;
    // End of variables declaration//GEN-END:variables

// Handle invoice
    
 private void generateDetail(Document doc, PdfContentByte cb) throws SQLException  {
        DecimalFormat df = new DecimalFormat("0");
            
            int rows=jTable1.getRowCount();
            int y = 615;
             int x = 1;
             
             boolean beginPage = true;
             
             for(int row = 0; row<rows; row++)
             {   
        
        
               String barcode_id = (String)jTable1.getValueAt(row, 0);
               String item_name = (String) jTable1.getValueAt(row, 1);
               String unit_price = (String)jTable1.getValueAt(row, 3);
               int unit_price_int = Integer.parseInt(unit_price);
               String my_val = (String)jTable1.getValueAt(row, 4);
               int item_quan = Integer.parseInt(my_val);
               String _date = soldDate.getText();
                  
                  if(beginPage){
                    beginPage = false;
                    generateLayout(doc, cb); 
                    generateHeader(doc, cb);
                    y = 615; 
                   }
                    y = y - 15;
                    if(y < 50){
                     printPageNumber(cb);
                     doc.newPage();
                     beginPage = true;
                       }
                 try {

                    createContent(cb, 40, y, String.valueOf(x++), PdfContentByte.ALIGN_LEFT);
                    createContent(cb, 55, y, barcode_id, PdfContentByte.ALIGN_LEFT);
                    createContent(cb, 160, y, item_name, PdfContentByte.ALIGN_LEFT);
                    createContent(cb, 435, y, unit_price, PdfContentByte.ALIGN_LEFT);
                    createContent(cb, 510, y, my_val, PdfContentByte.ALIGN_LEFT);

                    }  catch (Exception ex){
                    }

           }
             
              createContent(cb, 565, 62, totPrice.getText().trim(), PdfContentByte.ALIGN_RIGHT);
              printPageNumber(cb);
      
 }
 
 
  void createPDF (String dir){

    
  Document doc = new Document();
  PdfWriter docWriter = null;
  initializeFonts();

  try {
   String path = dir + "\\hahu_invoice.pdf";
   docWriter = PdfWriter.getInstance(doc , new FileOutputStream(path));
   doc.addAuthor("hahucomputers");
   doc.addCreationDate();
   doc.addProducer();
   doc.addCreator("www.hahucomputers.com");
   doc.addTitle("Invoice");
   doc.setPageSize(PageSize.LETTER);

   doc.open();
   PdfContentByte cb = docWriter.getDirectContent();
   
   boolean beginPage = true;
   int y = 0;
   generateDetail(doc, cb);
   for(int z=0; z < row_num; z++ ){
    if(beginPage){
     beginPage = false;
     generateLayout(doc, cb); 
     generateHeader(doc, cb);
     y = 615; 
    }
    
    y = y - 15;
    if(y < 50){
     printPageNumber(cb);
     doc.newPage();
     beginPage = true;
    }
      printPageNumber(cb);

   }
 
  }
  catch (DocumentException | FileNotFoundException | SQLException dex)
  {
      JOptionPane.showMessageDialog (this, "error while generating invoice", "ERROR", JOptionPane.ERROR_MESSAGE);

  }
  finally
  {
   if (doc != null)
   {
    doc.close();
   }
   if (docWriter != null)
   {
    docWriter.close();
   }
  }
 }
   
    
 
    
 
    private void generateLayout(Document doc, PdfContentByte cb)  {

  try {

   cb.setLineWidth(1f);

   // Invoice Header box layout
   cb.rectangle(420,700,150,60);
   cb.moveTo(420,720);
   cb.lineTo(570,720);
   cb.moveTo(420,740);
   cb.lineTo(570,740);
   cb.moveTo(480,700);
   cb.lineTo(480,760);
   cb.stroke();
   

   // Invoice Header box Text Headings 
   createHeadings(cb,422,743,"Account No.");
   createHeadings(cb,422,723,"Report No.");
   createHeadings(cb,422,703,"Report Date");
   
   
   // Invoice Detail box layout 
   cb.rectangle(20,50,550,600);  // creates a rectangel at the given cordinates, below is descr of the cordinates
   cb.moveTo(20,630);    // tells to start line 20 units far from the edge (x-cord) and 630 units (y-cord, arnd the top of the page )
   cb.lineTo(570,630);  //<- (to 570 units) -- strokes a line horizonatlly where the header details are written (qty, item desc..)
   cb.moveTo(50,75);
   cb.lineTo(50,650);  // strokes vertical line y-cord is where the drawing starts from top - top being the largest value 
   cb.moveTo(150,75);
   cb.lineTo(150,650);
   cb.moveTo(430,50);
   cb.lineTo(430,650);
   cb.moveTo(500,50);
   cb.lineTo(500,650);
   
   // Invoice footer layout 
   // the first cordiate value is x, where the drawing starts , the second is the y, the height of the content being drawn 
   // the 3rd cordinate is x , how far to go in x direction, the last is y how far it is from the ground
   cb.rectangle(20,50, 550,25);
   
   cb.stroke();

   // Invoice Detail box Text Headings 
   createHeadings(cb,22,633,"No.");
   createHeadings(cb,52,633,"Item ID");
   createHeadings(cb,152,633,"Item Description");
   createHeadings(cb,432,633,"Unit Price");
   createHeadings(cb,502,633,"Quantity");
   createHeadings(cb, 25, 60, "Total:");  // creates really a footer not a heading 


  }

  catch (Exception ex){
   ex.printStackTrace();
  }

 }
 
 private void generateHeader(Document doc, PdfContentByte cb)  {

  try {

   createHeadings(cb,50,750,"Company Name:   Emebet & Her Children Milk Process P.L.C");
   createHeadings(cb,50,735,"Address 1:      Kebele 16  ");
   createHeadings(cb,50,720,"Address 2:      _____________");
   createHeadings(cb,50,705,"City:           Bahir Dar");
   createHeadings(cb,50,690,"Country:        Ethiopia");
   createHeadings(cb,482,743,"");
   createHeadings(cb,482,723,"");
   createHeadings(cb,482,703,"");

  }

  catch (Exception ex){
   ex.printStackTrace();
  }

 }
 
 private void createHeadings(PdfContentByte cb, float x, float y, String text){


  cb.beginText();
  cb.setFontAndSize(bfBold, 8);
  cb.setTextMatrix(x,y);
  cb.showText(text.trim());
  cb.endText(); 

 }
 
 private void printPageNumber(PdfContentByte cb){


  cb.beginText();
  cb.setFontAndSize(bfBold, 8);
  cb.showTextAligned(PdfContentByte.ALIGN_RIGHT, "Page No. " + (pageNumber+1), 570 , 25, 0);
  cb.endText(); 
  
  pageNumber++;
  
 }
 
 private void createContent(PdfContentByte cb, float x, float y, String text, int align){


  cb.beginText();
  cb.setFontAndSize(bf, 8);
  cb.showTextAligned(align, text.trim(), x , y, 0);
  cb.endText(); 

 }

 private void initializeFonts(){


  try {
   bfBold = BaseFont.createFont(BaseFont.COURIER, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);
   bf = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.CP1252, BaseFont.NOT_EMBEDDED);

  } catch (DocumentException e) {
   e.printStackTrace();
  } catch (IOException e) {
   e.printStackTrace();
  }


 }





}
